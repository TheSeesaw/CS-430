// CS430_Project1.cpp : Defines the entry point for the console application.
//
// By: Kristoffer Schindele
#include <stdlib.h>
#include <stdio.h>

// struct representing pixel
typedef struct Pixel {
	unsigned char r, g, b, a;
} Pixel;

// declare a one dimensional array to hold 
// customized reading/writing routines

//assume file is already open
//convert to P3
void convertP3() {
	// detect which file type is being converted to P3
	if (t == 3) {
		// write identical data to new file 
		FILE* fho = fopen(argv[3], "w");
		// copy header data
		unsigned char space = ' ';
		// write magic number
		fwrite(p, sizeof(char), 1, fho);
		fwrite(t, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write width
		fwrite(width, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write height
		fwrite(height, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write maxval
		fwrite(max_val, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write raster
		fwrite(pixmap1d, sizeof(Pixel), width*height, fho);
		// close file
		fclose(fho);
		// done
		exit(0);
	}
	/*
	else {
		// convert to P6 (ASCII to binary)
		FILE* fho = fopen(argv[3], "wb");
		// copy header data
		// write magic number
		fwrite(p, sizeof(char), 1, fho);
		fwrite(t, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write width
		fwrite(width, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write height
		fwrite(height, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write maxval
		fwrite(max_val, sizeof(char), 1, fho);
		fwrite(space, sizeof(char), 1, fho);
		// write raster
	}
	*/
}

int main(int argc, char *argv[]) {

	// argument checking
	if (argc != 3) {
		fprintf(stderr, "Error: Invalid number of arguments.");
		return 1;
	}
	else if (argv[2] == NULL || argv[3] == NULL) {
		fprintf(stderr, "Error reading or writing file.");
		return 1;
	}

	FILE* fhi = fopen(argv[2], "r"); // open file for reading
	// check file header for type
	// read in file header
	// store first character in dummy variable
	int p = fgetc(fhi);
	// store MAGIC NUMBER in t
	int t = fgetc(fhi);

	// more error handling
	// travel through whitespace until a new character is reached
	int w = fgetc(fhi);
	while (w != ' ' || w != '\n') {
		w = fgetc(w);
	}
	// next character will be file width
	int width = w;
	// repeat travel process untill height value is reached
	w = fgetc(fhi);
	while (w != ' ' || w != '\n') {
		w = fgetc(w);
	}
	int height = w;
	// repeat travel process until maxval character is reached
	w = fgetc(fhi);
	while (w != ' ' || w != '\n') {
		w = fgetc(w);
	}
	int max_val = w;
	if (max_val > 255) {
		fprintf(stderr, "Error: file is not on a 255 color scale.");
		return 1;
	}
	// allocate memory based on file size
	Pixel *pixmap1d = malloc(sizeof(Pixel)*width*hight);
	// jump to appropriate routine
	// argument supplied in command line determines the format to be converted TO
	switch (t) {
	case 3:
		convertP3();
		break;
	//case 6:
		//convertP6();
		//break;
	//case 7:
		//convertP7();
		//break;
	default:
		fprintf(stderr, "Error: Invalid file.");
	}
	
}
